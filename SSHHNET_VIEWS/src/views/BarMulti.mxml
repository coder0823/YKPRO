<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" horizontalAlign="center" creationComplete="init(true)">
	<!--
	/* *
	* 名称：条形组件
	* 参数：
	* 作者：孙山虎
	* 日期：2012年12月29日
	* */
	-->
	<fx:Metadata>
		[Event(name="PopupClick", type="events.PopupEvent")]
		[Event(name="PopupDoubleClick", type="events.PopupEvent")]
	</fx:Metadata>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<!--组件属性-->
		<fx:String id="title">报表标题</fx:String>
		<fx:Boolean id="showTitle">true</fx:Boolean>
		<fx:Boolean id="showLegend">true</fx:Boolean>
		<fx:Number id="labelRotationY">{CustomVariable.ChartLeftLabelRotation}</fx:Number>
		<fx:Boolean id="showZoomControlBox">false</fx:Boolean>
		<fx:Boolean id="showLabelControlBox">false</fx:Boolean>
		<mx:SeriesSlide id="ss" direction="right" duration="2000"/>
		<s:NumberFormatter id="numberFormatter" fractionalDigits="0" useGrouping="false"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.charts.ChartItem;
			import mx.charts.HitData;
			import mx.charts.LegendItem;
			import mx.charts.LineChart;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.chartClasses.Series;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.renderers.CircleItemRenderer;
			import mx.charts.series.BarSeries;
			import mx.charts.series.items.BarSeriesItem;
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColor;
			import mx.utils.StringUtil;
			
			import spark.events.IndexChangeEvent;
			
			import events.PopupEvent;

			[Bindable]
			public var showDataTips:Boolean=true;
			[Bindable]
			private var showDataLabel:Boolean=true;
			
			private var dataSourceConfChanged:Boolean=false;
			private var dataSourceChanged:Boolean=false;
			[Bindable]
			private var dataSourceConf:ArrayCollection;
//			private var dataSourceConf:ArrayCollection=new ArrayCollection([
//				{name:"计划",field:"vol1"},
//				{name:"完成",field:"vol2"},
//				{name:"剩余",field:"vol3"},
//			]);
			[Bindable]
			private var dataSource:ArrayCollection;
//			private var dataSource:ArrayCollection = new ArrayCollection([
//				{label:"油田",vol1:2,vol2:30,vol3:40},
//				{label:"炼化",vol1:4,vol2:40,vol3:50},
//				{label:"销售",vol1:9,vol2:90,vol3:100},
//				{label:"工程",vol1:6,vol2:60,vol3:70},
//				{label:"其他",vol1:6,vol2:60,vol3:70}
//			]);
			[Bindable]
			public var BSolidColor:Array=views.CustomColor.BSolidColor;
			[Bindable]
			public var BSolidColorStroke:Array=views.CustomColor.BSolidColorStroke;
			[Bindable]
			public var AxisTopUnit:String="%";
			[Bindable]
			public var AxisBottomUnit:String="";
			[Bindable]
			public var AxisBottomTiltle:String="";
			[Bindable]
			public var AxisLeftTiltle:String="";
			[Bindable]
			public var AxisTopTiltle:String="";
			[Bindable]
			public var AxisRightTiltle:String="";
			[Bindable]
			public var BarTopMinimum:Number=0;
			[Bindable]
			public var BarTopMaximum:Number=100;
			
			protected function init(IfFirst:Boolean=false):void{
				if(dataSourceConf!=null){
					var array:Array = new Array();   
					var indexBar:int=1;
					for(var i:int=0;i<dataSourceConf.length;i++){  
						var o:Object = dataSourceConf.getItemAt(i);  
						var barSeries:BarSeries=new BarSeries();
						barSeries.yField="label"
						barSeries.xField = o["field"].toString();
						barSeries.maxBarWidth =30;
						barSeries.displayName=o["name"].toString();
						//barSeries.labelFunction=columnSeries_labelFunc;
						//barSeries.setStyle("showDataEffect",ss);

						if(showDataLabel){//&&o["showLabel"]!=0
							barSeries.setStyle("labelPosition","outside");//inside
						}else{
							barSeries.setStyle("labelPosition", "none");	
						}	
						
						
						barSeries.setStyle("fill", o["color"]!=null?o["color"]:BSolidColor[indexBar]);
						//渐变色
						barSeries.fillFunction=views.CommFunction.barFillFun(o["color"]!=null?o["color"]:views.CustomColor.CColor[indexBar]);
						barSeries.setStyle("showDataEffect",ss);		
						array.push( barSeries );
						indexBar++;
					}  
					barChart.series = array;					
				}
				initLegend();
				refresh(IfFirst);
			}
			protected function refresh(IfFirst:Boolean):void{
				barChart.dataProvider=dataSource;
				if(IfFirst){//如果最大值最小值非外面传入则
					initAxis();
				}
				
				//添加阴影
				var chart:LineChart = new LineChart();
				barChart.seriesFilters = chart.seriesFilters;
			}
			protected function initAxis():void
			{
				var maxT:Number=Number.MIN_VALUE;
				if(dataSourceConf!=null&&dataSourceConf.length>0&&dataSource&&dataSource.length>0){
					
					for each (var vol:Object in dataSource){
						var maxTt:Number=0;
						for each (var obj:Object in dataSourceConf) {  
							maxTt+=Number(vol[obj.field]);
						}
						maxT=Math.max(maxT,maxTt);
					}
					
					if(maxT>8){
						BarTopMaximum=Math.round(maxT*CustomVariable.ChartTopAxisMaxCoefficient);
					}else if(maxT>4){
						BarTopMaximum=10;
					}else{
						BarTopMaximum=5;
					}
				}
			}
			//上侧X轴显示
			private function hTAxis_LabelFunction(item:Object, prevValue:Object, axis:IAxis):String {
				return numberFormatter.format(item)+AxisTopUnit;
			}
			//下侧X轴显示
			private function hDAxis_LabelFunction(item:Object,prevValue:Object,axis:IAxis):String   
			{  
				return  numberFormatter.format(item)+AxisBottomUnit;  
			} 
			//柱子上的标签
			private function columnSeries_labelFunc(chartItem:ChartItem, series:Series):String {
				var col:String = BarSeries(chartItem.element).xField;
				//return  numberFormatter.format(chartItem.item[col]);
				return chartItem.item[col];
				//return  ColumnSeries(chartItem.element).displayName+numberFormatter.format(chartItem.item[col]);
			}
			//柱子Tips信息
			private function columnChart_dataTipFunc(item:HitData):String {
				var cSI:BarSeriesItem = item.chartItem as BarSeriesItem;
				var col:String = BarSeries(item.element).xField;
				var label:String=BarSeries(item.element).displayName;//cSI.item.label;
				//return StringUtil.substitute("<b>{0}</b><br>{1}: {2}",label , col, numberFormatter.format(cSI.item[col]));
				return StringUtil.substitute("<b>{0}:</b>{1}",label , numberFormatter.format(cSI.item[col]));
			}
			
			protected function initLegend():void{
				if(legend1){
					legend1.removeAllElements();
					if(dataSourceConf!=null){
						for(var i:int=0;i<dataSourceConf.length;i++){  
							var o:Object = dataSourceConf.getItemAt(i);  
							var legendItem:LegendItem=new LegendItem();
							legendItem.label=o["name"].toString();
							legendItem.setStyle("fill", (o["color"]!=null)?new SolidColor(o["color"],1):BSolidColor[i+1]);					
							legendItem.setStyle("itemRenderer", new ClassFactory(CircleItemRenderer));
							legend1.addElement(legendItem);
						}  
					}
				}
				
			}
			
			public function get DataSourceConf():ArrayCollection
			{
				return dataSourceConf;
			}
			public function set DataSourceConf(value:ArrayCollection):void
			{
				dataSourceConfChanged=true;
				dataSourceConf = value;
				invalidateProperties();
			}	
			public function get DataSource():ArrayCollection
			{
				return dataSource;
			}
			public function set DataSource(value:ArrayCollection):void
			{
				dataSourceChanged=true;
				dataSource = value;
				invalidateProperties();
			}
			public function get ShowDataLabel():Boolean{
				return showDataLabel;
			}
			public function set ShowDataLabel(value:Boolean):void{
				showDataLabel = value;
				init(false);
			}
			override protected function commitProperties():void
			{
				super.commitProperties();
				if (dataSourceChanged)
				{
					dataSourceChanged = false;
					refresh(true);
					//invalidateDisplayList();  // invalidate in case the titles 
					
				}
				if (dataSourceConfChanged)
				{
					dataSourceConfChanged = false;
					init(true);
					//invalidateDisplayList();  // invalidate in case the titles 
					
				}
			}
			protected function barChart_itemClickHandler(event:ChartItemEvent):void
			{
				// TODO Auto-generated method stub
				var obj:Object=new Object();
				obj=event.hitData.item;
				obj.displayName=BarSeries(event.hitData.element).displayName;
				obj.seriesType="barSeries";
				var eventObj:PopupEvent = new PopupEvent(PopupEvent.PopupClick);  
				//这里一定跟上面[Event(name="PopupClick", ...)],使用的name相同，否则，派发的事件不会被接收到				
				eventObj.hitDataItem = obj;
				//获取配置信息
				for(var i:int=0;i<dataSourceConf.length;i++){
					var o:Object=dataSourceConf.getItemAt(i);
					if(String(o.name)==obj.displayName){
						eventObj.hitCfgItem = o;
						break;
					}
				}
				dispatchEvent(eventObj);
			}
			protected function barChart_itemDoubleClickHandler(event:ChartItemEvent):void
			{
				// TODO Auto-generated method stub
				var obj:Object=new Object();
				obj=event.hitData.item;
				obj.displayName=BarSeries(event.hitData.element).displayName;
				obj.seriesType="barSeries";
				var eventObj:PopupEvent = new PopupEvent(PopupEvent.PopupDoubleClick);  
				//这里一定跟上面[Event(name="PopupDoubleClick", ...)],使用的name相同，否则，派发的事件不会被接收到				
				eventObj.hitDataItem = obj;
				//获取配置信息
				for(var i:int=0;i<dataSourceConf.length;i++){
					var o:Object=dataSourceConf.getItemAt(i);
					if(String(o.name)==obj.displayName){
						eventObj.hitCfgItem = o;
						break;
					}
				}
				dispatchEvent(eventObj);				
			}
			
			//主程序调用
			//			 PopupClick="xxxx_lightHandler(event)"
			//			protected function xxxx_lightHandler(event:events.PopupEvent):void
			//			{
			//				// TODO Auto-generated method stub
			//				var item:Object=event.hitDataItem;
			//				.....
			//			}
			

			protected function widthDropDown_changeHandler(event:IndexChangeEvent):void  
			{  
				totalPage = int(widthDropDown.selectedItem.@value);  
				hsb.maximum = (totalPage - 1) * 10;  
				hsb.value = 0;  
				setDataProvider();  
			}  
			protected function hsb_changeHandler(event:Event):void  
			{  
				setDataProvider();  
			}  
			private var totalPage:int = 1;  
			protected function zoomin(event:MouseEvent):void  
			{  
				if(totalPage >= (1 << 4))  
					return;  
				hsb.value = hsb.value * 0.5;  
				totalPage = totalPage << 1;  
				hsb.maximum = (totalPage - 1) * 10;  
				setDataProvider();  
			}  
			protected function zoomout(event:MouseEvent):void  
			{  
				if(totalPage == 1)  
					return;  
				hsb.value = hsb.value * 2;  
				totalPage = totalPage >> 1;  
				hsb.maximum = (totalPage - 1) * 10;  
				setDataProvider();  
			}  
			protected function setDataProvider():void  
			{  
				var j:int = int(hsb.value / hsb.maximum * (hsb.maximum / 10 / totalPage) * dataSource.length);  
				var ac:ArrayCollection = new ArrayCollection();  
				var len:int = Math.ceil(1.0 * dataSource.length / totalPage);  
				for (var i:int = 0; (i < len) && (i + j) < dataSource.length; i++)   
				{  
					ac.addItem(dataSource.getItemAt(i + j));  
				}  
				barChart.dataProvider = ac;  
			}  
			
			
			protected function chkShowVol_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				showDataLabel=chkShowVol.selected;
				init(false);
			}

			
		]]>
	</fx:Script>
	<!--标题-->  
	<mx:Label text="{title}" styleName="titleStyle" visible="{showTitle}"/>
	<!--控制器-->
	<s:HGroup width="98%" height="25" horizontalAlign="center" verticalAlign="middle" visible="{this.showZoomControlBox}" includeInLayout="{this.showZoomControlBox}">  
		<s:ComboBox id="widthDropDown" width="90" change="widthDropDown_changeHandler(event)"  
					labelField="@label" requireSelection="true">  
			<s:XMLListCollection>  
				<fx:XMLList xmlns="">  
					<node label="原始宽度" value="1"/>  
					<node label="两倍宽度" value="2"/>  
					<node label="四倍宽度" value="4"/>  
				</fx:XMLList>  
			</s:XMLListCollection>  
		</s:ComboBox>  
		<s:Button label="放大" click="zoomin(event)"/>  
		<s:Button label="缩小" click="zoomout(event)"/>  
		<s:HScrollBar id="hsb" width="100%" height="20" change="hsb_changeHandler(event)"  
					  maximum="0" minimum="0" snapInterval="1" value="0"/> 
		<s:CheckBox id="chkShowVol" label="显示数值" selected="{showDataLabel}" change="chkShowVol_changeHandler(event)" visible="{this.showLabelControlBox}" includeInLayout="{this.showLabelControlBox}"/>
	</s:HGroup>
	<!--统计图-->  
	<mx:BarChart id="barChart" styleName="chart" dataProvider="{dataSource}" width="100%" height="100%" showDataTips="true" doubleClickEnabled="true" dataTipFunction="columnChart_dataTipFunc" type="stacked" itemClick="barChart_itemClickHandler(event)" itemDoubleClick="barChart_itemDoubleClickHandler(event)">    
		<mx:backgroundElements>
			<mx:GridLines verticalStroke="{views.CustomColor.AxisSolidColorStroke}" />
		</mx:backgroundElements>
		<!--横坐标-->  
		<mx:horizontalAxis>
			<mx:LinearAxis id="hTAxis" labelFunction="hDAxis_LabelFunction" baseAtZero="true" title="{AxisTopTiltle}" maximum="{BarTopMaximum}" minimum="{BarTopMinimum}"/>
		</mx:horizontalAxis>
		<!--纵坐标1-->  
		<mx:verticalAxis>
			<mx:CategoryAxis id="vLAxis" categoryField="label" title="{AxisLeftTiltle}"/>
		</mx:verticalAxis>
		<!--横坐标渲染-->  
		<mx:horizontalAxisRenderers>
			<mx:AxisRenderer id="axisX1" tickStroke="{views.CustomColor.TickSolidColorStroke}" minorTickStroke="{views.CustomColor.MinorTickSolidColorStroke}" axisStroke="{views.CustomColor.AxisSolidColorStroke}" showLine="true" tickLength="5" tickPlacement="outside" axis="{hTAxis}" placement="bottom"  labelGap="0"/>
		</mx:horizontalAxisRenderers>
		<!--纵坐标渲染-->  
		<mx:verticalAxisRenderers>  
			<mx:AxisRenderer tickStroke="{views.CustomColor.TickSolidColorStroke}" minorTickStroke="{views.CustomColor.MinorTickSolidColorStroke}" axisStroke="{views.CustomColor.AxisSolidColorStroke}" showLine="true" tickLength="5" tickPlacement="outside" placement="left" axis="{vLAxis}"  labelGap="0" labelRotation="{labelRotationY}"/>
		</mx:verticalAxisRenderers>  
		<mx:series>
		</mx:series>
	</mx:BarChart>
	<!--图例-->
	<mx:Canvas id="legend" visible="{showLegend}" includeInLayout="{showLegend}">		
		<s:BorderContainer styleName="legendBox" verticalCenter="0" horizontalCenter="0">
			<mx:Legend id="legend1" height="20" bottom="8"/>
			<!--<mx:Legend dataProvider="{barChart}" markerHeight="10" markerWidth="10" horizontalAlign="center" horizontalCenter="0" direction="horizontal"/>-->
		</s:BorderContainer>
	</mx:Canvas>	
</s:VGroup>
