<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" horizontalAlign="center" creationComplete="init(true)">
	<!--
	/* *
	* 名称：柱线组件
	* 参数：
	* 作者：孙山虎
	* 日期：2012年12月29日
	* */
	-->
	<fx:Metadata>
		[Event(name="PopupClick", type="events.PopupEvent")]
		[Event(name="PopupDoubleClick", type="events.PopupEvent")]
		[Event(name="SetAxisComplate",type="events.SetAxisComplateEvent")]
	</fx:Metadata>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<!--组件属性-->
		<fx:String id="title">报表标题</fx:String>
		<fx:Boolean id="showTitle">true</fx:Boolean>
		<fx:Boolean id="showLegend">true</fx:Boolean>
		<fx:Number id="labelRotationX">{CustomVariable.ChartBottomLabelRotation}</fx:Number>
		<fx:Boolean id="showZoomControlBox">false</fx:Boolean>
		<fx:Boolean id="showLabelControlBox">false</fx:Boolean>
		<mx:SeriesInterpolate id="si" duration="2000" />
		<mx:SeriesZoom id="sz" duration="2000" />
		<mx:SeriesSlide id="ss" direction="up" duration="2000"/>
		<mx:WipeRight id="wr" duration="2000"/>
		<s:NumberFormatter id="numberFormatter" fractionalDigits="0" useGrouping="false"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import events.PopupEvent;
			import events.SetAxisComplateEvent;
			
			import mx.charts.ChartItem;
			import mx.charts.LegendItem;
			import mx.charts.LineChart;
			import mx.charts.chartClasses.IAxis;
			import mx.charts.chartClasses.Series;
			import mx.charts.events.ChartItemEvent;
			import mx.charts.renderers.CircleItemRenderer;
			import mx.charts.series.ColumnSeries;
			import mx.charts.series.LineSeries;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColor;
			import mx.graphics.SolidColorStroke;
			
			import renderers.LineRenderers;
			
			import spark.events.IndexChangeEvent;

			[Bindable]
			public var showDataTips:Boolean=true;
			[Bindable]
			private var showDataLabel:Boolean=true;
			
			private var dataSourceConfChanged:Boolean=false;
			private var dataSourceChanged:Boolean=false;
			[Bindable]
			private var dataSourceConf:ArrayCollection;
//			private var dataSourceConf:ArrayCollection=new ArrayCollection([
//				{name:"计划",field:"vol1",type:"columnSeries",axis:"left",color:0xcccccc,showLabel:1},
//				{name:"完成",field:"vol2",type:"columnSeries",axis:"left",color:0xcccccc,showLabel:1},
//				{name:"剩余",field:"vol3",type:"columnSeries",axis:"left",color:0xcccccc,showLabel:1},
//				{name:"完成率",field:"vol4",type:"lineSeries",axis:"left",color:0xcccccc,showLabel:0},
//			]);
			[Bindable]
			private var dataSource:ArrayCollection;
//			private var dataSource:ArrayCollection = new ArrayCollection([
//				{label:"油田",vol1:2,vol2:30,vol3:40,vol4:99},
//				{label:"炼化",vol1:4,vol2:40,vol3:50,vol4:33},
//				{label:"销售",vol1:9,vol2:90,vol3:100,vol4:77},
//				{label:"工程",vol1:6,vol2:60,vol3:70,vol4:22},
//				{label:"其他",vol1:6,vol2:60,vol3:70,vol4:55}
//			]);
			[Bindable]
			public var AxisLeftUnit:String="";
			[Bindable]
			public var AxisRightUnit:String="%";
			[Bindable]
			public var AxisBottomTiltle:String="";
			[Bindable]
			public var AxisLeftTiltle:String="";
			[Bindable]
			public var AxisTopTiltle:String="";
			[Bindable]
			public var AxisRightTiltle:String="";
			
			[Bindable]
			public var CSolidColor:Array=views.CustomColor.CSolidColor;
			[Bindable]
			public var LSolidColor:Array=views.CustomColor.LSolidColor;
			[Bindable]
			public var LSolidColorStroke:Array=views.CustomColor.LSolidColorStroke;
			
			[Bindable]
			public var line_type:String="curve";//segment，	curve		
			
			
			//用于输入当前坐标最大最小值
			public var UseCustomAxisMaxMinmum:Boolean=false;	
			[Bindable]
			private var leftAxisMaximum:Number=0;
			[Bindable]
			private var leftAxisMinimum:Number=0;
			[Bindable]
			private var rightAxisMaximum:Number=0;
			[Bindable]
			private var rightAxisMinimum:Number=0;
			public function get LeftAxisMaximum():Number
			{
				return leftAxisMaximum;
			}
			public function set LeftAxisMaximum(value:Number):void
			{
				leftAxisMaximum = value;
			}
			public function get RightAxisMaximum():Number
			{
				return rightAxisMaximum;
			}
			public function set RightAxisMaximum(value:Number):void
			{
				rightAxisMaximum = value;
			}
			public function get LeftAxisMinimum():Number
			{
				return leftAxisMinimum;
			}
			public function set LeftAxisMinimum(value:Number):void
			{
				leftAxisMinimum = value;
			}
			public function get RightAxisMinimum():Number
			{
				return rightAxisMinimum;
			}
			public function set RightAxisMinimum(value:Number):void
			{
				rightAxisMinimum = value;
			}
			
			
			protected function init(IfFirst:Boolean=false):void{
				if(dataSourceConf!=null){
					var array:Array = new Array(); 
					var cntLeft:int=0;
					var cntRight:int=0;
					var indexCol:int=0;
					var indexLin:int=0;
					for(var i:int=0;i<dataSourceConf.length;i++){  
						var o:Object = dataSourceConf.getItemAt(i);  
						if(o["type"]=="columnSeries"){
							var columnSeries:ColumnSeries=new ColumnSeries();
							columnSeries.xField="label"
							columnSeries.yField = o["field"].toString();
							columnSeries.maxColumnWidth =30;
							//columnSeries.columnWidthRatio
							columnSeries.displayName=o["name"].toString();
							if(o["labelFun"]==1){
								columnSeries.labelFunction=columnSeries_labelFunc2;
							}else{
								columnSeries.labelFunction=columnSeries_labelFunc;
							}
							
							if(showDataLabel&&o["showLabel"]!=0){
								columnSeries.setStyle("labelPosition","outside");
							}else{
								columnSeries.setStyle("labelPosition", "none");	
							}	
							columnSeries.setStyle("fill", o["color"]!=null?o["color"]:CSolidColor[indexCol]);
							//渐变色
							columnSeries.fillFunction=views.CommFunction.colFillFun(o["color"]!=null?o["color"]:views.CustomColor.CColor[indexCol]);
							if(o["axis"]=="right"){columnSeries.verticalAxis=vRAxis;cntRight++;}else{columnSeries.verticalAxis=vLAxis;cntLeft++;}
							columnSeries.setStyle("showDataEffect",ss);		
							//columnSeries.setStyle("itemRenderer",new ClassFactory(drawhelper.solidSkin));
							array.push( columnSeries );
							indexCol++;
						}else if(o["type"]=="lineSeries"){					
							var lineSeries1:LineSeries=new LineSeries();  //设置图表的系列
							lineSeries1.xField="label"
							lineSeries1.yField = o["field"].toString();
							lineSeries1.displayName=o["name"].toString();
							lineSeries1.setStyle("form",line_type);  				
							lineSeries1.setStyle("fill", o["color"]!=null?o["color"]:LSolidColor[indexLin]);
							lineSeries1.setStyle("radius", 3);
							lineSeries1.setStyle("adjustedRadius", 1);
							if(showDataLabel&&o["showLabel"]!=0){
								lineSeries1.setStyle("itemRenderer",new ClassFactory(renderers.LineRenderers));
							}else{
								lineSeries1.setStyle("itemRenderer", new ClassFactory(CircleItemRenderer));	
							}	
							lineSeries1.setStyle("lineStroke",o["color"]!=null?new SolidColorStroke(o["color"],1,1):LSolidColorStroke[indexLin]);
							if(o["axis"]=="right"){lineSeries1.verticalAxis=vRAxis;cntRight++;}else{columnSeries.verticalAxis=vLAxis;cntLeft++;}
							lineSeries1.setStyle("showDataEffect",wr);
							array.push( lineSeries1 );
							indexLin++;
						}
					}  
					if(cntLeft>0){axisY1.visible=true;}else{axisY1.visible=false;}
					if(cntRight>0){axisY2.visible=true;}else{axisY2.visible=false;}
					columnChart.series = array;				
				}
				initLegend();
				refresh(IfFirst);
			}
			protected function refresh(IfFirst:Boolean):void{
				columnChart.dataProvider=dataSource;
				if(!UseCustomAxisMaxMinmum||IfFirst){//如果最大值最小值非外面传入则
					initAxis();
				}
				//添加阴影
				var chart:LineChart = new LineChart();
//				columnChart.seriesFilters = chart.seriesFilters;
				columnChart.seriesFilters = [];
			}
			protected function initAxis():void
			{
				
					var minL:Number=Number.MAX_VALUE;
					var minR:Number=Number.MAX_VALUE;
					var maxL:Number=Number.MIN_VALUE;
					var maxR:Number=Number.MIN_VALUE;
					if(dataSourceConf!=null&&dataSourceConf.length>0){
						for each (var obj:Object in dataSourceConf) {  
							for each (var vol:Object in dataSource){
								if(obj.axis=="right"){
									maxR=Math.max(maxR,isNaN(Number(vol[obj.field]))?0:Number(vol[obj.field]));
									minR=Math.min(minR,isNaN(Number(vol[obj.field]))?0:Number(vol[obj.field]));
								}else{
									maxL=Math.max(maxL,isNaN(Number(vol[obj.field]))?0:Number(vol[obj.field]));
									minL=Math.min(minL,isNaN(Number(vol[obj.field]))?0:Number(vol[obj.field]));
								}
							}
						}
					}
					if(maxL>8){
						vLAxis.maximum=Math.round(maxL*CustomVariable.ChartLeftAxisMaxCoefficient);
					}else if(maxL>4){
						vLAxis.maximum=10;
					}else{
						vLAxis.maximum=5;
					}				
					if(maxR>8){
						vRAxis.maximum=Math.round(maxR*CustomVariable.ChartRightAxisMaxCoefficient);
					}else if(maxR>4){
						vRAxis.maximum=10;
					}else{
						vRAxis.maximum=5;
					}
					
					if(minL<-8){
						vLAxis.minimum=Math.round(minL*CustomVariable.ChartLeftAxisMinCoefficient);
					}else if(minL<-4){
						vLAxis.minimum=-10;
					}else if(minL<0){
						vLAxis.minimum=-5;
					}else{
						vLAxis.minimum=0;
					
					}					
					if(minR<-8){
						vRAxis.minimum=Math.round(minR*CustomVariable.ChartRightAxisMinCoefficient);
					}else if(minR<-4){
						vRAxis.minimum=-10;
					}else if(minR<0){
						vRAxis.minimum=-5;
					}else{
						vRAxis.minimum=0;				
					}
					leftAxisMaximum=vLAxis.maximum;
					leftAxisMinimum=vLAxis.minimum;
					rightAxisMaximum=vRAxis.maximum;
					rightAxisMinimum=vRAxis.minimum;
					var eventObj:SetAxisComplateEvent = new SetAxisComplateEvent(SetAxisComplateEvent.SetAxisComplate);  
					eventObj.setLeftAxisMaximum=leftAxisMaximum;
					eventObj.setLeftAxisMinimum=leftAxisMinimum;
					eventObj.setRightAxisMaximum=rightAxisMaximum;
					eventObj.setRightAxisMinimum=rightAxisMinimum;
					dispatchEvent(eventObj);
			}
			
			//左侧Y轴显示
			private function vLAxis_LabelFunction(item:Object, prevValue:Object, axis:IAxis):String {
				return numberFormatter.format(item)+AxisLeftUnit;  
			}
			//右侧Y轴显示
			private function vRAxis_LabelFunction(item:Object,prevValue:Object,axis:IAxis):String   
			{  
				return  numberFormatter.format(item)+AxisRightUnit;  
			} 
			//柱子上的标签
			private function columnSeries_labelFunc(chartItem:ChartItem, series:Series):String {
				var col:String = ColumnSeries(chartItem.element).yField;
				//return  numberFormatter.format(chartItem.item[col]);
				return chartItem.item[col];
				//return  ColumnSeries(chartItem.element).displayName+numberFormatter.format(chartItem.item[col]);
			}
			private function columnSeries_labelFunc2(chartItem:ChartItem, series:Series):String {
				var col:String = ColumnSeries(chartItem.element).yField;
				return chartItem.item[col]+"%";
			}
			protected function initLegend():void{
				legend1.removeAllElements();
				if(dataSourceConf!=null){
					var indexCol:int=0;
					var indexLin:int=0;
					for(var i:int=0;i<dataSourceConf.length;i++){  
						var o:Object = dataSourceConf.getItemAt(i);  
						var legendItem:LegendItem=new LegendItem();
						legendItem.label=o["name"].toString();
						if(o["type"]=="columnSeries"){
							legendItem.setStyle("fill", (o["color"]!=null)?new SolidColor(o["color"],1):CSolidColor[indexCol]);		
							indexCol++;
						}else if(o["type"]=="lineSeries"){		
							legendItem.setStyle("fill", (o["color"]!=null)?new SolidColor(o["color"],1):LSolidColor[indexLin]);		
							indexLin++;
						}
								
						legendItem.setStyle("itemRenderer", new ClassFactory(CircleItemRenderer));
						legend1.addElement(legendItem);
					}  
				}
			}

			
			public function get DataSourceConf():ArrayCollection
			{
				return dataSourceConf;
			}
			public function set DataSourceConf(value:ArrayCollection):void
			{
				dataSourceConfChanged=true;
				dataSourceConf = value;
				invalidateProperties();
			}	
			public function get DataSource():ArrayCollection
			{
				return dataSource;
			}
			public function set DataSource(value:ArrayCollection):void
			{
				dataSourceChanged=true;
				dataSource = value;
				invalidateProperties();
			}
			public function get ShowDataLabel():Boolean{
				return showDataLabel;
			}
			public function set ShowDataLabel(value:Boolean):void{
				showDataLabel = value;
				init(false);
			}
			override protected function commitProperties():void
			{
				super.commitProperties();
				if (dataSourceChanged)
				{
					dataSourceChanged = false;
					refresh(true);
					//invalidateDisplayList();  // invalidate in case the titles 					
				}
				if (dataSourceConfChanged)
				{
					dataSourceConfChanged = false;
					init(true);
					//invalidateDisplayList();  // invalidate in case the titles 					
				}
			}
			
			protected function columnChart_itemClickHandler(event:ChartItemEvent):void
			{
				// TODO Auto-generated method stub
				var obj:Object=new Object();
				obj=event.hitData.item;
				if(event.hitData.element as ColumnSeries==null){
					obj.displayName=LineSeries(event.hitData.element).displayName;
					obj.seriesType="lineSeries";
				}else{
					obj.displayName=ColumnSeries(event.hitData.element).displayName;//cSI.item.label;
					obj.seriesType="columnSeries"
				}
				var eventObj:PopupEvent = new PopupEvent(PopupEvent.PopupClick);  
				//这里一定跟上面[Event(name="PopupClick", ...)],使用的name相同，否则，派发的事件不会被接收到
				eventObj.hitDataItem = obj;
				//获取配置信息
				for(var i:int=0;i<dataSourceConf.length;i++){
					var o:Object=dataSourceConf.getItemAt(i);
					if(String(o.name)==obj.displayName){
						eventObj.hitCfgItem = o;
						break;
					}
				}
				dispatchEvent(eventObj);
			}
			protected function columnChart_itemDoubleClickHandler(event:ChartItemEvent):void
			{
				// TODO Auto-generated method stub
				var obj:Object=new Object();
				obj=event.hitData.item;
				if(event.hitData.element as ColumnSeries==null){
					obj.displayName=LineSeries(event.hitData.element).displayName;
					obj.seriesType="lineSeries";
				}else{
					obj.displayName=ColumnSeries(event.hitData.element).displayName;//cSI.item.label;
					obj.seriesType="columnSeries"
				}
				var eventObj:PopupEvent = new PopupEvent(PopupEvent.PopupDoubleClick);  
				//这里一定跟上面[Event(name="PopupDoubleClick", ...)],使用的name相同，否则，派发的事件不会被接收到				
				eventObj.hitDataItem = obj;
				//获取配置信息
				for(var i:int=0;i<dataSourceConf.length;i++){
					var o:Object=dataSourceConf.getItemAt(i);
					if(String(o.name)==obj.displayName){
						eventObj.hitCfgItem = o;
						break;
					}
				}
				dispatchEvent(eventObj);				
			}
			//主程序调用
			//			 PopupClick="xxxx_lightHandler(event)"
			//			protected function xxxx_lightHandler(event:events.PopupEvent):void
			//			{
			//				// TODO Auto-generated method stub
			//				var item:Object=event.hitDataItem;
			//				.....
			//			}

			
			protected function widthDropDown_changeHandler(event:IndexChangeEvent):void  
			{  
				totalPage = int(widthDropDown.selectedItem.@value);  
				hsb.maximum = (totalPage - 1) * 10;  
				hsb.value = 0;  
				setDataProvider();  
			}  
			protected function hsb_changeHandler(event:Event):void  
			{  
				setDataProvider();  
			}  
			private var totalPage:int = 1;  
			protected function zoomin(event:MouseEvent):void  
			{  
				if(totalPage >= (1 << 4))  
				{
					/**********************add by sunyang@20150409***********************/
					Alert.show("已放到最大值")
					/********************************************************************/
					
					return;  
				}
				hsb.value = hsb.value * 0.5;  
				totalPage = totalPage << 1;  
				hsb.maximum = (totalPage - 1) * 10;  
				setDataProvider();  
			}  
			protected function zoomout(event:MouseEvent):void  
			{  
				if(totalPage == 1)  
				{
					/**********************add by sunyang@20150409***********************/
					Alert.show("已放到最小值");
					/********************************************************************/
					
					return;
				}
				hsb.value = hsb.value * 2;  
				totalPage = totalPage >> 1;  
				hsb.maximum = (totalPage - 1) * 10;  
				setDataProvider();  
			}  
			protected function setDataProvider():void  
			{  
				var j:int = int(hsb.value / hsb.maximum * (hsb.maximum / 10 / totalPage) * dataSource.length);  
				var ac:ArrayCollection = new ArrayCollection();  
				var len:int = Math.ceil(1.0 * dataSource.length / totalPage);  
				for (var i:int = 0; (i < len) && (i + j) < dataSource.length; i++)   
				{  
					ac.addItem(dataSource.getItemAt(i + j));  
				}  
				columnChart.dataProvider = ac;  
			}  
			
			protected function chkShowVol_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				showDataLabel=chkShowVol.selected;
				init(false);
			}
			
		]]>
	</fx:Script>
	<!--标题-->  
	<mx:Label text="{title}" styleName="titleStyle" visible="{showTitle}"/>
	<!--控制器-->
	<s:HGroup width="98%" height="25" horizontalAlign="center" verticalAlign="middle" visible="{this.showZoomControlBox}" includeInLayout="{this.showZoomControlBox}">  
		<s:ComboBox id="widthDropDown" width="90" change="widthDropDown_changeHandler(event)"  
						labelField="@label" requireSelection="true">  
			<s:XMLListCollection>  
				<fx:XMLList xmlns="">  
					<node label="原始宽度" value="1"/>  
					<node label="两倍宽度" value="2"/>  
					<node label="四倍宽度" value="4"/>  
				</fx:XMLList>  
			</s:XMLListCollection>  
		</s:ComboBox>  
		<s:Button label="放大" click="zoomin(event)"/>  
		<s:Button label="缩小" click="zoomout(event)"/>  
		<s:HScrollBar id="hsb" width="100%" height="20" change="hsb_changeHandler(event)"  
					  maximum="0" minimum="0" snapInterval="1" value="0"/>  
		<s:CheckBox id="chkShowVol" label="显示数值" selected="{showDataLabel}" change="chkShowVol_changeHandler(event)" visible="{this.showLabelControlBox}" includeInLayout="{this.showLabelControlBox}"/>
	</s:HGroup>  
	<!--统计图-->  
	<mx:ColumnChart id="columnChart" styleName="chart" dataProvider="{dataSource}" width="100%" height="100%" showDataTips="true" 
					doubleClickEnabled="true"
					itemClick="columnChart_itemClickHandler(event)" 
					itemDoubleClick="columnChart_itemDoubleClickHandler(event)">    
		<mx:backgroundElements>
			<mx:GridLines horizontalStroke="{views.CustomColor.AxisSolidColorStroke}"/>
		</mx:backgroundElements>
		<!--横坐标-->  
		<mx:horizontalAxis>
			<mx:CategoryAxis id="hAxis" categoryField = "label" title="{AxisBottomTiltle}"/>
		</mx:horizontalAxis>
		<!--纵坐标1-->  
		<mx:verticalAxis>
			<mx:LinearAxis id="vLAxis" labelFunction="vLAxis_LabelFunction" baseAtZero="true" title="{AxisLeftTiltle}" maximum="{leftAxisMaximum}" minimum="{leftAxisMinimum}"/>
		</mx:verticalAxis>
		<!--横坐标渲染-->  
		<mx:horizontalAxisRenderers>
			<mx:AxisRenderer tickStroke="{views.CustomColor.TickSolidColorStroke}" minorTickStroke="{views.CustomColor.MinorTickSolidColorStroke}" axisStroke="{views.CustomColor.AxisSolidColorStroke}" showLine="true" tickLength="5" tickPlacement="outside" axis="{hAxis}" placement="bottom"  labelGap="0"  labelRotation="{labelRotationX}"/>
		</mx:horizontalAxisRenderers>
		<!--纵坐标渲染-->  
		<mx:verticalAxisRenderers>  
			<mx:AxisRenderer id="axisY1" visible="false" tickStroke="{views.CustomColor.TickSolidColorStroke}" minorTickStroke="{views.CustomColor.MinorTickSolidColorStroke}" axisStroke="{views.CustomColor.AxisSolidColorStroke}" showLine="true" tickLength="5" tickPlacement="outside" placement="left" axis="{vLAxis}"  labelGap="0"/>
			<mx:AxisRenderer id="axisY2" visible="false" tickStroke="{views.CustomColor.TickSolidColorStroke}" minorTickStroke="{views.CustomColor.MinorTickSolidColorStroke}" axisStroke="{views.CustomColor.AxisSolidColorStroke}" showLine="true" tickLength="5" tickPlacement="outside" placement="right" axis="{vRAxis}"   labelGap="0"/>
		</mx:verticalAxisRenderers>  
		<mx:series>
			<mx:LineSeries id="lineX" visible="false">
				<mx:verticalAxis>  
					<mx:LinearAxis id="vRAxis" title="{AxisRightTiltle}" labelFunction="vRAxis_LabelFunction" baseAtZero="true" maximum="{rightAxisMaximum}" minimum="{rightAxisMinimum}"/>  
				</mx:verticalAxis>  
			</mx:LineSeries>
		</mx:series>
	</mx:ColumnChart>
	<!--图例-->
	<mx:Canvas id="legend" visible="{showLegend}" includeInLayout="{showLegend}">
		<s:BorderContainer styleName="legendBox" verticalCenter="0" horizontalCenter="0">
			<mx:Legend id="legend1" height="20" bottom="8"/>
			<!--<mx:Legend dataProvider="{columnChart}" markerHeight="10" markerWidth="10" horizontalAlign="center" horizontalCenter="0" direction="horizontal"/>-->
		</s:BorderContainer>
	</mx:Canvas>	
</s:VGroup>
